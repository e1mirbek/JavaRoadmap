package collections.set;

// Set - –æ–¥–Ω–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö,
// —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
// Set - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–∏–∫–∞–∫–∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
// –ù–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π)
// HashSet ‚Äî —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π, –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ.
// LinkedHashSet ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
// TreeSet ‚Äî —Ö—Ä–∞–Ω–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é).

// // üß∫ –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã Set:
/// // | –ú–µ—Ç–æ–¥                          | –û–ø–∏—Å–∞–Ω–∏–µ                                                |
/// // |-------------------------------|---------------------------------------------------------|
/// // | `add(E e)`                    | –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)  |
/// // | `addAll(Collection<? extends E> c)` | –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –¥—Ä—É–≥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏       |
/// // | `remove(Object o)`            | –£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç                              |
/// // | `removeAll(Collection<?> c)`  | –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏|
/// // | `retainAll(Collection<?> c)`  | –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –¥—Ä—É–≥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ |
/// // | `contains(Object o)`          | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞                             |
/// // | `containsAll(Collection<?> c)`| –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥—Ä—É–≥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ |
/// // | `isEmpty()`                   | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç–æ –ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ                          |
/// // | `size()`                      | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤                        |
/// // | `clear()`                     | –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã                                   |
/// // | `iterator()`                  | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤             |
/// // | `toArray()`                   | –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Set –≤ –º–∞—Å—Å–∏–≤                               |
/// // | `equals(Object o)`            | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–≤—É—Ö –º–Ω–æ–∂–µ—Å—Ç–≤                      |
/// // | `hashCode()`                  | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö—ç—à-–∫–æ–¥ –º–Ω–æ–∂–µ—Å—Ç–≤–∞                           |

import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;

public class SetExample {

    public static void main(String[] args){
        // –ü—Ä–∏–º–µ—Ä 1: HashSet ‚Äî –±–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        Set<String> fruits = new HashSet<>();
        fruits.add("Apple");
        fruits.add("Banana");
        fruits.add("Orange");
        fruits.add("Apple"); // –¥—É–±–ª–∏–∫–∞—Ç –Ω–µ –¥–æ–±–∞–≤–∏—Ç—Å—è

        System.out.println("fruits : " + fruits);
        System.out.println("Contains Banana? " + fruits.contains("Banana"));
        fruits.remove("Orange");
        System.out.println("After removal: " + fruits);


        // –ü—Ä–∏–º–µ—Ä 2: LinkedHashSet ‚Äî –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
        Set<String> names = new LinkedHashSet<>();
        names.add("Elmirbek");
        names.add("Elmir");
        names.add("Emir");

        System.out.println("Names : " + names);

        // –ü—Ä–∏–º–µ—Ä 3: TreeSet ‚Äî —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        Set<Integer> numbers = new TreeSet<>();
        numbers.add(44);
        numbers.add(15);
        numbers.add(4);
        numbers.add(77);
        System.out.println("Sort : " + numbers);
    }
}
