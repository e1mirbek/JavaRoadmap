package collections.map;

// map - —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä—ã <<–∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ>>
// –ø—Ä–∏–º–µ—Ä —Å —Ç–µ–æ—Ä–∏–µ–π
// "apple" -> "—è–±–ª–æ–∫–æ"
// "banana" -> "–±–∞–Ω–∞–Ω"

// ‚ùó—É –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ –µ—Å—Ç—å —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
// üîπ –ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ?
// –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ,
// —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º,
// –∏ –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
// –ù–∞–ø—Ä–∏–º–µ—Ä:
// –õ–æ–≥–∏–Ω ‚Üí –ü–∞—Ä–æ–ª—å
// –ò–º—è ‚Üí –í–æ–∑—Ä–∞—Å—Ç
// ID ‚Üí –û–±—ä–µ–∫—Ç

// üîπ –í Java —ç—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Map<K, V>
// K ‚Äî —Ç–∏–ø –∫–ª—é—á–∞
// V ‚Äî —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è
// –ù–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: HashMap.

// // üó∫Ô∏è –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã Map:
/// / | –ú–µ—Ç–æ–¥                            | –û–ø–∏—Å–∞–Ω–∏–µ                                           |
/// / | -------------------------------- | -------------------------------------------------- |
/// / | `put(K key, V value)`            | –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É         |
/// / | `get(Object key)`                | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É                      |
/// / | `remove(Object key)`             | –£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∫–ª—é—á—É                          |
/// / | `containsKey(Object key)`        | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞                           |
/// / | `containsValue(Object value)`    | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è                        |
/// / | `isEmpty()`                      | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç–∞ –ª–∏ –∫–∞—Ä—Ç–∞                         |
/// / | `size()`                         | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤                   |
/// / | `clear()`                        | –û—á–∏—â–∞–µ—Ç –∫–∞—Ä—Ç—É                                     |
/// / | `keySet()`                       | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π                       |
/// / | `values()`                       | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –∑–Ω–∞—á–µ–Ω–∏–π                    |
/// / | `entrySet()`                     | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ            |
/// / | `getOrDefault(Object key, V def)`| –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é     |
/// / | `putIfAbsent(K key, V value)`    | –î–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç         |
/// / | `replace(K key, V value)`        | –ó–∞–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç           |
/// / | `compute(K key, BiFunction)`     | –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É                       |
/// / | `computeIfAbsent(K key, Func)`   | –í—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç         |
/// / | `computeIfPresent(K key, BiFunc)`| –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª—é—á –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç        |
/// / | `merge(K key, V value, BiFunc)`  | –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏—è          |


import java.util.HashMap;
import java.util.Map;

public class MapExample {
    public static void main(String[] args) {
        Map<String, Integer> ages = new HashMap<>();

        ages.put("Elmirbek", 19);
        ages.put("Adilet", 18);
        ages.put("Kayrat", 17);

        // –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
        int age = ages.get("Elmirbek");
        System.out.println("–í–æ–∑—Ä–∞—Å—Ç –≠–ª–º–∏–±–µ–∫–∞ : " + age);

        // –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á
        if (ages.containsKey("Elmirbek")) {
            System.out.println("–≠–ª–º–∏—Ä–±–µ–∫ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ");
        }

        // –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for (Map.Entry<String, Integer> entry : ages.entrySet()) {
            System.out.println(entry.getKey() + " -> " + entry.getValue());
        }


        // —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
        ages.remove("Adilet");
        System.out.println("–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ê–¥–∏–ª–µ—Ç–∞ : ");
        System.out.println(ages);

        for (Map.Entry<String, Integer> entry : ages.entrySet()) {
            System.out.println("–ö–ª—é—á : " + entry.getKey() + " –ó–Ω–∞—á–µ–Ω–∏–µ : " + entry.getValue());
        }
    }
}
