package expressionsAndFunctionalProgramming.streamApi;

//  —É–¥–æ–±–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
//  –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (List, Set, Map –∏ —Ç.–¥.) –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ.

// üîπ –ó–∞—á–µ–º –Ω—É–∂–µ–Ω Stream API?
//–ß—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –∏ —Ç.–ø.)
// –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤ (for, while)
// –∏ —Å –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º, –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∫–æ–¥–æ–º.

// üîπ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç Stream API?
// –° –ø–æ–º–æ—â—å—é Stream API —Ç—ã –º–æ–∂–µ—à—å:
// üîç –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞).
// üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Å–µ —á–∏—Å–ª–∞ –Ω–∞ 1).
// üî¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã.
// üìä –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É, –º–∞–∫—Å–∏–º—É–º, —Å—Ä–µ–¥–Ω–µ–µ).
// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —É—Å–ª–æ–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ –ª–∏ —á–∏—Å–ª–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ).
// üßµ –†–∞–±–æ—Ç–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö).


import java.util.ArrayList;
import java.util.List;

public class StreamApiExample {
    public static void main(String[] args) {
        List <Integer> streamApi = new ArrayList<>();
        streamApi.stream()                         // ‚Üê –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Stream)
                .filter(n -> n % 2 == 0)  // ‚Üê –ï—â—ë –º–µ—Ç–æ–¥ API
                .sorted().                       // ‚Üê –ú–µ—Ç–æ–¥ API
                toList();                       // ‚Üê –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –º–µ—Ç–æ–¥
        System.out.println("Stream API"); //

    }
}
